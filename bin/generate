#!/usr/bin/env python3

import argparse
import os
import pathlib
import shlex
import shutil
import subprocess
import sys

HERE = pathlib.Path(__file__).resolve().parent
ROOT = HERE.parent
sys.path.insert(0, os.fspath(ROOT))

from lib import config, jinjaenv
from lib.common import IMAGESDIR, logger
from lib.db import Status
from lib.jinjaenv import JINJAENV
from lib.statuses import parse_and_save_all_existing_statuses


def generate_index(statuses):
    total_statuses = len(statuses)
    generate_page(
        'index.html', 'index.html',
        total_statuses=total_statuses,
        total_pages=(total_statuses - 1) // config.values.statuses_per_page + 1,
    )


def generate_page(template, path, **kwargs):
    logger.info(f'generating {path}')
    if isinstance(template, str):
        template = JINJAENV.get_template(template)
    path = config.values.build_dir / path
    path.parent.mkdir(parents=True, exist_ok=True)
    with open(path, 'w') as fp:
        fp.write(template.render(**kwargs))


def generate_paginated(statuses):
    total = len(statuses)
    per_page = config.values.statuses_per_page
    page_count = (total - 1) // per_page + 1
    for page in range(1, page_count + 1):
        generate_page('paginated.html', f'{page}.html',
                      page=page,
                      total_pages=page_count,
                      statuses=statuses[per_page * (page - 1): per_page * page])


def generate_all(statuses):
    with jinjaenv.setglobal('LAZYLOAD', True):
        generate_page('all.html', 'all.html', statuses=statuses)


def copy_favicons():
    for filename in ('favicon.ico', 'apple-touch-icon.png'):
        src = IMAGESDIR / 'icons' / filename
        if not src.exists():
            logger.error(f'{src} not found')
            continue
        dst = config.values.build_dir / filename
        shutil.copyfile(src, dst)

    if config.values.site_root != '/':
        logger.warning('You need to manually move favicon.ico and apple-touch-icon.png '
                       'to the actual site root.')


def run(cmd):
    print(' '.join(shlex.quote(str(arg)) for arg in cmd))
    subprocess.run(cmd)


def sync_assets():
    build_dir = config.values.build_dir
    assets_dir = build_dir / 'assets'
    assets_dir.mkdir(parents=True, exist_ok=True)
    subdirs = ('css', 'images', 'js')
    if config.values.sync_audio:
        subdirs.append('audio')
    for subdir in subdirs:
        exclude_list = ['.gitignore', 'README.md']
        if subdir == 'images' and not config.values.local_images:
            exclude_list.extend(('images/large', 'images/thumb*'))
        run(['rsync', '-avP', f'--link-dest={ROOT}'] +
            [f'--exclude={pattern}' for pattern in exclude_list] +
            [ROOT / subdir, assets_dir])


def main():
    parser = argparse.ArgumentParser()
    add = parser.add_argument
    add('-p', '--parse', action='store_true',
        help='parse saved statuses on disk and (re-)populate database')
    add('--parse-only', action='store_true',
        help='parse saved statuses but do not generate pages; implies --parse')
    add('config_file', type=pathlib.Path)
    args = parser.parse_args()
    args.parse = args.parse or args.parse_only

    config.load(args.config_file)
    jinjaenv.init()
    if args.parse:
        parse_and_save_all_existing_statuses()
    if args.parse_only:
        sys.exit(0)

    statuses = Status.select().order_by(Status.created_at.desc())
    build_dir = config.values.build_dir
    build_dir.mkdir(parents=True, exist_ok=True)
    logger.info(f'generating site in {build_dir}')
    generate_index(statuses)
    generate_paginated(statuses)
    generate_all(statuses)
    generate_page('about-her.html', 'about-her.html')
    generate_page('not-found.html', 'not-found.html')

    sync_assets()
    copy_favicons()


if __name__ == '__main__':
    main()
