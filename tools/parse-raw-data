#!/usr/bin/env python3

import argparse
import collections
import json
import pathlib


HERE = pathlib.Path(__file__).resolve().parent
ROOT = HERE.parent
RAW_DATA_DIR = ROOT / 'raw'
RAW_MAIN_DATA_FILE = RAW_DATA_DIR / 'main.json'
RAW_LONGTEXT_FILE = RAW_DATA_DIR / 'longtext.json'
MID_BLACKLIST_FILE = RAW_DATA_DIR / 'blacklist.txt'
PARSED_DATA_DIR = ROOT / 'api'


def parse_main(raw_data, blacklist):
    for status in raw_data:
        mid = status['mid']
        if mid in blacklist:
            continue
        with open(PARSED_DATA_DIR / f'{mid}.json', 'w') as fp:
            json.dump(status, fp, ensure_ascii=False, indent=2)


def parse_longtext(raw_data):
    data = collections.OrderedDict()
    for uid_mid in raw_data:
        mid = uid_mid.split('/')[1]
        msg = raw_data[uid_mid]['msg']
        if msg:
            data[mid] = msg
    with open(PARSED_DATA_DIR / 'longtext.json', 'w') as fp:
        json.dump(data, fp, ensure_ascii=False, indent=2)


def main():
    with open(MID_BLACKLIST_FILE) as fp:
        blacklist = [line.strip() for line in fp]
    with open(RAW_MAIN_DATA_FILE) as fp:
        raw_main_data = json.load(fp, object_pairs_hook=collections.OrderedDict)
        parse_main(raw_main_data, blacklist)
    with open(RAW_LONGTEXT_FILE) as fp:
        raw_longtext_data = json.load(fp, object_pairs_hook=collections.OrderedDict)
        parse_longtext(raw_longtext_data)


if __name__ == '__main__':
    main()
